name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
    
jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    # container:
    #   image: node:20
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
        - 27017:27017
        # options:
        #   --name mongo
    env:
      MONGO_URI: mongodb://localhost:27017/superData
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Setup NodeJS Version
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - name: Cache NPM dependencies
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
    - name: Install Dependencies
      run: npm install
    - name: Unit Testing
      run: npm test
    - name: Archive Test Result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Mocha-Test-Result
        path: test-results.xml
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:20
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env:
      MONGO_URI: mongodb://mongo/superData
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    # - name: Setup NodeJS Version
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: 20
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - name: Cache NPM dependencies
      id: npm-cache 
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
    - name: Install Dependencies
      run: npm install
    - name: Run Code-coverage
      run: npm run coverage
      continue-on-error: true
    - name: Archive Code-coverage Result
      uses: actions/upload-artifact@v4
      with:
        name: Code-Coverage-Result
        path: coverage
        retention-days: 5
  docker:
    needs: [unit-testing, code-coverage]
    name: Contanarize
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/mrinmoihossain/solar-system:${{ github.sha }}
  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: [docker]
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      runner-os: ubuntu-latest
      environment: development
      k8s-manifest-dir: kubernetes/development
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    needs: [dev-deploy]
    uses: ./.github/workflow/reuse-integration-testing.yaml
    with:
      runner-os: ubuntu-latest
      environment: development
  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: [docker]
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      runner-os: ubuntu-latest
      environment: production
      k8s-manifest-dir: kubernetes/production
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    needs: [prod-deploy]
    name: Production Integration Testing
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
    - name: Test Application Endpoints
      env:
        URL: ${{ needs.prod-deploy.outputs.app-endpoints }}
      run: |
        echo $URL
        # curl https://$URL/live -s -k | jq -r .status | grep -i live
